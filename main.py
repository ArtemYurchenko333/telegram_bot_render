from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import os

TOKEN = os.getenv("BOT_TOKEN")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ Render üòä")

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    keyboard = [
        [InlineKeyboardButton("–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä", callback_data="main_menu_1")],
        [InlineKeyboardButton("–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä", callback_data="main_menu_2")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:", reply_markup=reply_markup)
    logger.info(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")

# --- –ü–æ–¥–º–µ–Ω—é 1 (3 –ø—É–Ω–∫—Ç–∞) ---
async def show_sub_menu_1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é 1."""
    query = update.callback_query
    await query.answer() # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ callback_query

    keyboard = [
        [InlineKeyboardButton("–ö–æ–ª—å–æ—Ä–æ–≤—ñ", callback_data="sub_menu_1_item_1")],
        [InlineKeyboardButton("–ß–æ—Ä–Ω—ñ", callback_data="sub_menu_1_item_2")],
        [InlineKeyboardButton("–ë—ñ–ª—ñ", callback_data="sub_menu_1_item_3")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")] # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ü—É–Ω–∫—Ç 1. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)
    logger.info(f"–ü–æ–¥–º–µ–Ω—é 1 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {query.from_user.id}")

# --- –ü–æ–¥–º–µ–Ω—é 2 (4 –ø—É–Ω–∫—Ç–∞) ---
async def show_sub_menu_2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é 2."""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("29-33", callback_data="sub_menu_2_item_1")],
        [InlineKeyboardButton("34-37", callback_data="sub_menu_2_item_2")],
        [InlineKeyboardButton("38-41", callback_data="sub_menu_2_item_3")],
        [InlineKeyboardButton("42-45", callback_data="sub_menu_2_item_4")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")] # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ü—É–Ω–∫—Ç 2. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)
    logger.info(f"–ü–æ–¥–º–µ–Ω—é 2 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {query.from_user.id}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–æ–≤ –ø–æ–¥–º–µ–Ω—é ---
async def handle_sub_menu_item(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—É–Ω–∫—Ç–æ–≤ –∏–∑ –ø–æ–¥–º–µ–Ω—é."""
    query = update.callback_query
    await query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data}") # –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
    response_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data}. –ü–æ–∫–∞ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞."
    await query.edit_message_text(response_text) # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –≤—ã–±—Ä–∞–ª {query.data}")

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
    # keyboard = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
    # await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ---
async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä", callback_data="main_menu_1")],
        [InlineKeyboardButton("–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä", callback_data="main_menu_2")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:", reply_markup=reply_markup)
    logger.info(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not TOKEN:
        logger.error("BOT_TOKEN environment variable not set. Please set it in Render dashboard.")
        print("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render.")
        exit(1)

    application = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))

    # –î–æ–±–∞–≤–ª—è–µ–º CallbackQueryHandler –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
    application.add_handler(CallbackQueryHandler(show_sub_menu_1, pattern="^main_menu_1$"))
    application.add_handler(CallbackQueryHandler(show_sub_menu_2, pattern="^main_menu_2$"))
    application.add_handler(CallbackQueryHandler(back_to_main_menu, pattern="^back_to_main$"))

    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—É–Ω–∫—Ç–æ–≤ –ø–æ–¥–º–µ–Ω—é (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "sub_menu_")
    # –í–∞–∂–Ω–æ: —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤,
    # –µ—Å–ª–∏ –∏—Ö callback_data –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "sub_menu_", —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.
    application.add_handler(CallbackQueryHandler(handle_sub_menu_item, pattern="^sub_menu_"))


    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ Polling...")
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ Polling. –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    application.run_polling()

if __name__ == "__main__":
    main()
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
